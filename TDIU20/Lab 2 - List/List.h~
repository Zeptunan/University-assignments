#ifndef LIST_H
#define LIST_H
#include <initializer_list>

/* Double linked list */
class List {
   private:
    /* Node class */
    class Node {
       public:
        Node();                                   // Node default constructor
        Node(int value, Node* prev, Node* next);  // Node constructor
        int data;                                 // Node data
        Node* prev;                               // Prev node pointer
        Node* next;                               // Next node pointer
    };

    Node* first;   // Pointer to first node in the list
    Node* last;    // Pointer to last node in the list
    int listSize;  // Size of the list

   public:
    List();   // Default constructor
    ~List();  // Destructor

    List(std::initializer_list<int> list);  // Initializer list constructor

    List(const List& other);             // Copy constructor
    List& operator=(const List& other);  // Copy assignment

    List(List&& other);             // Move constructor
    List& operator=(List&& other);  // Move assignment

    void insert(int value);    // Insert value into the list
    void remove(int value);    // Remove value from the list
    void clear();              // Clear the list
    int get(int index) const;  // Get the value at index
    int size() const;          // Get the size of the list
    bool isEmpty() const;      // Check if the list is empty
    void print() const;        // Print the list

    List sub(std::initializer_list<int> indexes) const;  // Returns a sub list
};

#endif  // LIST_H
